struct QSTRING {
    string QString;
};

struct QUESTSTRINGS {
    uint32 Offsets[8];
    local int s = FTell();
    local int i;
    for (i=0;i<8;i++) {
        FSeek(s+(Offsets[i]-Offsets[0]));
        QSTRING String;
    }
    BigEndian();
    while (1) {
        ubyte LenUnk;
        if (LenUnk != 0) {
            break;
        }
    }
    char Unk[LenUnk];
};

struct EQUIPREST {
    uint16 ItemID <fgcolor=0xffffff>;
    uint16 Deco1 <fgcolor=0x00ffff>;
    uint16 Deco2 <fgcolor=0xff00ff>;
    uint16 Deco3 <fgcolor=0xffff00>;
};

struct REST {
    ubyte Unk;
    ubyte Unk;
};

struct MONICON {
    ubyte Unk;
    ubyte MonID;
};

struct QUEST {
    LittleEndian();
    uint32 QuestID <bgcolor=0x0000ff>;
    ubyte Unk <hidden=true>;
    uint32 Unk <hidden=true>;
    ubyte MaxPlayers <bgcolor=0x00ff00>;
    uint16 CounterTab <bgcolor=0xff0000>;
    uint32 Unk <hidden=true>;
    ubyte Unk <hidden=true>;
    ubyte Mark <bgcolor=0x00ff00>;
    uint16 Unk <hidden=true>;
    uint16 QuestID <bgcolor=0x0000ff>;
    uint16 Unk;
    ubyte ObjectiveType <bgcolor=0x00ff00>;
    ubyte Unk <hidden=true>;
    ubyte Stars <bgcolor=0xff0000>;
    uint16 CourseReq <bgcolor=0x0000ff>;
    uint16 Unk <hidden=true>;
    uint16 Unk <hidden=true>;
    ubyte Unk <hidden=true>;
    uint32 Fee <bgcolor=0x00ff00>;
    uint32 RewardMain <bgcolor=0xff0000>;
    uint32 RewardSubA <bgcolor=0x0000ff>;
    uint32 RewardSubB <bgcolor=0x00ff00>;
    uint32 Unk <hidden=true>;
    uint32 TimeLimit <bgcolor=0xff0000>;
    ubyte MapIcon <bgcolor=0x0000ff>;
    uint32 Unk <hidden=true>;
    ubyte Unk <hidden=true>;
    ubyte Unk <hidden=true>;
    REST Restrictions <bgcolor=0x00ff00>;
    ubyte Unk <hidden=true>;
    uint16 QuestFileID <bgcolor=0xff0000>;
    uint32 Unk <hidden=true>;
    MONICON MonIcon <bgcolor=0x0000ff>;
    uint16 MinHR <bgcolor=0x00ff00>;
    uint16 MaxHR <bgcolor=0xff0000>;
    uint16 MinJoinHR <bgcolor=0x0000ff>;
    uint16 MaxJoinHR <bgcolor=0x00ff00>;
    uint16 MinSR <bgcolor=0x00ff00>;
    uint16 MaxSR <bgcolor=0xff0000>;
    uint16 MinJoinSR <bgcolor=0x0000ff>;
    uint16 MaxJoinSR <bgcolor=0x00ff00>;
    uint32 Unk <hidden=true>;
    uint16 MinGR <bgcolor=0xff0000>;
    uint16 MaxGR <bgcolor=0x0000ff>;
    uint16 MinJoinGR <bgcolor=0x00ff00>;
    uint16 MaxJoinGR <bgcolor=0xff0000>;
    ubyte Unk2[10] <hidden=true>;
    EQUIPREST BootRest <bgcolor=0x0000ff>;
    EQUIPREST WepRest <bgcolor=0x00ff00>;
    EQUIPREST HeadRest <bgcolor=0xff0000>;
    EQUIPREST ChestRest <bgcolor=0x0000ff>;
    EQUIPREST ArmRest <bgcolor=0x00ff00>;
    EQUIPREST WaistRest <bgcolor=0xff0000>;
    ubyte Unk3[11] <hidden=true>;
    ubyte Mode <bgcolor=0x0000ff>;
    ubyte Unk4[12] <hidden=true>;
    uint32 ZennyMain <bgcolor=0x00ff00>;
    uint32 ZennySub1 <bgcolor=0xff0000>;
    uint32 ZennySub2 <bgcolor=0x0000ff>;
    uint16 RewardMat1 <bgcolor=0x00ff00>;
    uint16 RewardMat2 <bgcolor=0xff0000>;
    uint16 RewardMat3 <bgcolor=0x0000ff>;
    uint32 Unk <hidden=true>;
    ubyte Unk5[134] <hidden=true>;
    QUESTSTRINGS QuestStrings <bgcolor=0x00ff00>;
};

struct UNK1 {
    uint16 Unk0 <bgcolor=0xff0000>;
    uint16 Unk1 <bgcolor=0x00ff00>;
    ubyte Unk;
    ubyte Unk;
    ubyte Unk;
    ubyte Unk;
    uint16 Unk2 <bgcolor=0x0000ff>;
};

struct VSBETS {
    ubyte IsTicket;
    ubyte Unk;
    uint16 Unk;
    uint32 Quantity;
};

struct FILE {
    BigEndian();
    uint16 opcode;
    uint32 AckHandle;
    ubyte IsBuffered;
    ubyte ErrorCode;
    uint16 PacketSize;

    uint16 NumQuests;
    LittleEndian();
    QUEST Quests[NumQuests] <optimize=false>;

    BigEndian();
    uint16 Unk <fgcolor=0xff0000>;

    local int Test;

    uint16 Unk1Len <fgcolor=0x00ff00>;
    UNK1 Unk1[Unk1Len] <optimize=false,fgcolor=0x0000ff>;

    uint16 VSItemsLen <fgcolor=0xff0000>;
    uint32 VSBetsLen <fgcolor=0x00ff00>;
    uint16 Unk <fgcolor=0x0000ff>;
    uint16 VSItems[VSItemsLen] <fgcolor=0xff0000>;
    VSBETS VSBets[VSBetsLen] <fgcolor=0x00ff00>;

    uint16 CountQuests <fgcolor=0x0000ff>;
    uint16 ReqIndex <fgcolor=0xff0000>;
} file;