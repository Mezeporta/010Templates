// 0 = Decode entire quest
// 1 = Split data and quest strings
// 2 = Read entire quest as block
local int SimpleMode = 2;

struct QSTRING {
    string QString;
};

struct QUESTSTRINGS {
    uint32 Offsets[8] <fgcolor=0x666666>;
    local int s = FTell();
    local int i;
    for (i=0;i<8;i++) {
        FSeek(s+(Offsets[i]-Offsets[0]));
        QSTRING String <fgcolor=0x00ffff>;
    }
    BigEndian();
    while (1) {
        ubyte LenUnk <fgcolor=0x444444>;
        if (LenUnk != 0) {
            break;
        }
    }
    char Unk[LenUnk] <fgcolor=0x444444>;
};

struct EQUIPREST {
    uint16 ItemID <fgcolor=0xffffff>;
    uint16 Deco1 <fgcolor=0x00ffff>;
    uint16 Deco2 <fgcolor=0xff00ff>;
    uint16 Deco3 <fgcolor=0xffff00>;
};

struct REST {
    ubyte Unk;
    ubyte Unk;
};

struct MONICON {
    ubyte Unk;
    ubyte MonID;
};

struct QUEST {
    BigEndian();
    uint32 QuestID <bgcolor=0x00ff00>;
    uint32 Unk <bgcolor=0x00df20>;
    ubyte Index <bgcolor=0x00bf40>;
    ubyte MaxPlayers <bgcolor=0x209f60>;
    ubyte QuestType <bgcolor=0x407f80>;
    ubyte Unk <bgcolor=0x605fa0>; // 0 = Scenario quest
    uint16 Unk <bgcolor=0x803fc0>;
    uint32 Mark <bgcolor=0xa01ff0>;
    uint16 Unk <bgcolor=0xc000ef>;
    uint16 Length <bgcolor=0xf000cf>;

    local int QuestFileID;
    Printf("%d,%d,%d,%d,%d,%d,%d,%d,%d", QuestID,Unk[0],Index,MaxPlayers,QuestType,Unk[1],Unk[2],Mark,Unk[3]);
    LittleEndian();

    if (SimpleMode == 1) {
        ubyte QuestData[320] <bgcolor=0x000090>;
        QuestFileID = QuestData[47]*256 + QuestData[46];
    } else if (SimpleMode == 2) {
        ubyte QuestData[Length] <bgcolor=0x000090>;
        QuestFileID = QuestData[47]*256 + QuestData[46];
    } else {
        uint16 Unk;
        ubyte ObjectiveType <bgcolor=0x00ff00>;
        ubyte Unk <hidden=true>;
        ubyte Stars <bgcolor=0xff0000>;
        uint16 CourseReq <bgcolor=0x0000ff>;
        uint16 Unk <hidden=true>;
        uint16 Unk <hidden=true>;
        ubyte Unk <hidden=true>;
        uint32 Fee <bgcolor=0x00ff00>;
        uint32 RewardMain <bgcolor=0xff0000>;
        uint32 RewardSubA <bgcolor=0x0000ff>;
        uint32 RewardSubB <bgcolor=0x00ff00>;
        uint32 Unk <hidden=true>;
        uint32 TimeLimit <bgcolor=0xff0000>;
        ubyte MapIcon <bgcolor=0x0000ff>;
        uint32 Unk <hidden=true>;
        ubyte Unk <hidden=true>;
        ubyte Unk <hidden=true>;
        REST Restrictions <bgcolor=0x00ff00>;
        ubyte Unk <hidden=true>;
        uint16 QuestFileID <bgcolor=0xff0000>;
        uint32 Unk <hidden=true>;
        MONICON MonIcon <bgcolor=0x0000ff>;
        uint16 MinHR <bgcolor=0x00ff00>;
        uint16 MaxHR <bgcolor=0xff0000>;
        uint16 MinJoinHR <bgcolor=0x0000ff>;
        uint16 MaxJoinHR <bgcolor=0x00ff00>;
        uint16 MinSR <bgcolor=0x00ff00>;
        uint16 MaxSR <bgcolor=0xff0000>;
        uint16 MinJoinSR <bgcolor=0x0000ff>;
        uint16 MaxJoinSR <bgcolor=0x00ff00>;
        uint32 Unk <hidden=true>;
        uint16 MinGR <bgcolor=0xff0000>;
        uint16 MaxGR <bgcolor=0x0000ff>;
        uint16 MinJoinGR <bgcolor=0x00ff00>;
        uint16 MaxJoinGR <bgcolor=0xff0000>;
        ubyte Unk2[10] <hidden=true>;
        EQUIPREST BootRest <bgcolor=0x0000ff>;
        EQUIPREST WepRest <bgcolor=0x00ff00>;
        EQUIPREST HeadRest <bgcolor=0xff0000>;
        EQUIPREST ChestRest <bgcolor=0x0000ff>;
        EQUIPREST ArmRest <bgcolor=0x00ff00>;
        EQUIPREST WaistRest <bgcolor=0xff0000>;
        ubyte Unk3[11] <hidden=true>;
        ubyte Mode <bgcolor=0x0000ff>;
        ubyte Unk4[12] <hidden=true>;
        uint32 ZennyMain <bgcolor=0x00ff00>;
        uint32 ZennySub1 <bgcolor=0xff0000>;
        uint32 ZennySub2 <bgcolor=0x0000ff>;
        uint16 RewardMat1 <bgcolor=0x00ff00>;
        uint16 RewardMat2 <bgcolor=0xff0000>;
        uint16 RewardMat3 <bgcolor=0x0000ff>;
        uint32 Unk <hidden=true>;
        ubyte Unk5[134] <hidden=true>;
    }
    Printf(",%d\n", QuestFileID);
    //Printf("%d,%d,%d,%d\n", MaxPlayers, QuestType, QuestFileID, Mark);
    if (SimpleMode != 2) {
        QUESTSTRINGS QuestStrings <bgcolor=0xff0000>;
    } else {
        ubyte LenUnk <fgcolor=0x444444>;
        char Unk1[LenUnk] <fgcolor=0x444444>;
    }
};

struct TUNES {
    uint16 ID <bgcolor=0xff0000>;
    uint16 TimeOffset <bgcolor=0x00ff00>;
    ubyte Unk;
    ubyte Unk;
    ubyte Unk;
    ubyte Unk;
    uint16 Value <bgcolor=0x0000ff>;
    local uint16 RealID = ID^TimeOffset;
    local uint16 RealValue = Value^TimeOffset;
};

struct VSBETS {
    ubyte IsTicket;
    ubyte Unk;
    uint16 Unk;
    uint32 Quantity;
};

struct FILE {
    BigEndian();
    uint16 opcode;
    uint32 AckHandle;
    ubyte IsBuffered;
    ubyte ErrorCode;
    uint16 PacketSize;

    uint16 NumQuests;
    LittleEndian();
    QUEST Quests[NumQuests] <optimize=false>;

    BigEndian();
    uint16 TimeOffset <fgcolor=0xff0000>;
    uint16 TunesLen <fgcolor=0x00ff00>;
    TUNES Tunes[TunesLen] <optimize=false,fgcolor=0x0000ff>;

    uint16 VSItemsLen <fgcolor=0xff0000>;
    uint32 VSBetsLen <fgcolor=0x00ff00>;
    uint16 Unk <fgcolor=0x0000ff>;
    uint16 VSItems[VSItemsLen] <fgcolor=0xff0000>;
    VSBETS VSBets[VSBetsLen] <fgcolor=0x00ff00>;

    uint16 CountQuests <fgcolor=0x0000ff>;
    uint16 ReqIndex <fgcolor=0xff0000>;
} file;