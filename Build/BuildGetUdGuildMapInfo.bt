struct TILE { // 23 bytes
    uint16 TileID;
    uint16 NextTile;
    uint16 BranchTile;
    uint16 QuestFileID;
    uint32 Unk1;
    ubyte BranchIndex;
    ubyte Type;
    uint32 Points;
    ubyte Unk2[5];
};

struct MAP { // 1480 bytes
    uint32 MapID;
    uint32 NextMapID;
    TILE Tiles[64];
};

struct CHESTS { // 14 bytes
    uint32 Unk1; // Map index?
    ubyte ItemType;
    uint16 ItemID;
    uint16 Quantity;
    uint16 Unk4; // Treasure tile index?
    uint16 Unk5;
    ubyte ChestType; // 1 = yellow, 2 = red
};

struct TILEPROG { // 23 bytes
    uint32 PointsProg;
    uint32 PointsReq;
    uint16 TileID;
    uint16 NextTile;
    uint16 BranchTile;
    uint16 QuestFileID;
    uint32 Unk;
    ubyte BranchIndex;
    ubyte Type;
    ubyte Claimed;
};

struct MAPPROG {
    uint32 MapID;
    uint16 Unk;
    ubyte NumTiles;
    TILEPROG Tiles[NumTiles];
};

struct FILE {
    BigEndian();
    uint16 opcode;
    uint32 AckHandle;
    ubyte IsBuffered;
    ubyte ErrorCode;
    uint16 PacketSize;

    uint16 NumMaps;
    MAP Maps[NumMaps];
    uint16 NumChests;
    CHESTS Chests[NumChests];
    ubyte NumMapProg;
    MAPPROG MapProg[NumMapProg] <optimize=false>;
    uint32 TilesClaimed;
} file;