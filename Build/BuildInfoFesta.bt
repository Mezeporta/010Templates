struct PS1 {
    ubyte Len;
    char String[Len];
};

struct PS2 {
    uint16 Len;
    char String[Len];
};

struct TRIAL {
    uint32 ID;
    uint16 TrialType;
    uint32 Target;
    uint16 GoalNum;
    uint16 Location;
    uint16 Souls;
    uint16 Monopoly;
    uint16 Unk;
};

struct REWARD {
    ubyte Unk;
    ubyte Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;
    ubyte Unk;
    Printf("{%d,%d,%d,%d,%d,%d,%d,%d},\n", Unk[0], Unk[1], Unk[2], Unk[3], Unk[4], Unk[5], Unk[6], Unk[7]);
};

struct WINNER {
    uint32 GuildID;
    uint16 CategoryID;
    uint16 Team;
    PS1 GuildName;
};

struct FILE {
    BigEndian();
    uint16 opcode;
    uint32 AckHandle;
    ubyte IsBuffered;
    ubyte ErrorCode;
    uint16 PacketSize;

    uint32 ID;
    time_t RegistrationTime;
    time_t FestivalTime;
    time_t TotallingTime;
    time_t RewardTime;
    time_t UnkTime;
    //Printf("%d,%d,%d,%d", FestivalTime-RegistrationTime, TotallingTime-FestivalTime, RewardTime-TotallingTime, UnkTime-RewardTime);
    time_t CurrentTime;

    ubyte Unk;
    PS1 FestaString;

    uint32 Unk;
    uint32 BlueSouls;
    uint32 RedSouls;

    uint16 NumTrials;
    TRIAL Trials[NumTrials];

    uint16 NumRewards;
    REWARD Rewards[NumRewards] <optimize=false>;

    uint32 Unk;
    uint16 Unk;

    uint16 Winners;
    WINNER CategoryWinners[Winners] <optimize=false>;

    uint16 Winners;
    WINNER DailyWinners[Winners] <optimize=false>;

    uint32 Unk;
    uint32 Unk;
    uint32 Unk;
    uint32 Unk;
    uint32 Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;
    uint16 Unk;

    PS2 FestaString;
} file;